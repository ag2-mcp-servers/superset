# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:13:40+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import UploadFile

from models import (
    AnnotationLayerDeleteResponse,
    AnnotationLayerGetResponse,
    AnnotationLayerGetResponse1,
    AnnotationLayerInfoGetResponse,
    AnnotationLayerInfoGetResponse1,
    AnnotationLayerPkAnnotationAnnotationIdDeleteResponse,
    AnnotationLayerPkAnnotationAnnotationIdGetResponse,
    AnnotationLayerPkAnnotationAnnotationIdGetResponse1,
    AnnotationLayerPkAnnotationAnnotationIdPutResponse,
    AnnotationLayerPkAnnotationAnnotationIdPutResponse1,
    AnnotationLayerPkAnnotationDeleteResponse,
    AnnotationLayerPkAnnotationGetResponse,
    AnnotationLayerPkAnnotationGetResponse1,
    AnnotationLayerPkAnnotationPostResponse,
    AnnotationLayerPkAnnotationPostResponse1,
    AnnotationLayerPkDeleteResponse,
    AnnotationLayerPkGetResponse,
    AnnotationLayerPkGetResponse1,
    AnnotationLayerPkPutResponse,
    AnnotationLayerPkPutResponse1,
    AnnotationLayerPostResponse,
    AnnotationLayerPostResponse1,
    AnnotationLayerRelatedColumnNameGetResponse,
    AnnotationLayerRestApiPost,
    AnnotationLayerRestApiPut,
    AnnotationRestApiPost,
    AnnotationRestApiPut,
    AsyncEventGetResponse,
    AsyncEventGetResponse1,
    CacheInvalidationRequestSchema,
    CachekeyInvalidatePostResponse,
    ChartCacheScreenshotResponseSchema,
    ChartDataAsyncResponseSchema,
    ChartDataCacheKeyGetResponse,
    ChartDataPostResponse,
    ChartDataQueryContextSchema,
    ChartDataResponseSchema,
    ChartDeleteResponse,
    ChartExportGetResponse,
    ChartFavoriteStatusGetResponse,
    ChartGetResponse,
    ChartGetResponse1,
    ChartImportPostResponse,
    ChartInfoGetResponse,
    ChartInfoGetResponse1,
    ChartPkCacheScreenshotGetResponse,
    ChartPkDataGetResponse,
    ChartPkDeleteResponse,
    ChartPkGetResponse,
    ChartPkGetResponse1,
    ChartPkPutResponse,
    ChartPkPutResponse1,
    ChartPkScreenshotDigestGetResponse,
    ChartPkThumbnailDigestGetResponse,
    ChartPostResponse,
    ChartPostResponse1,
    ChartRelatedColumnNameGetResponse,
    ChartRestApiPost,
    ChartRestApiPut,
    CssTemplateDeleteResponse,
    CssTemplateGetResponse,
    CssTemplateGetResponse1,
    CssTemplateInfoGetResponse,
    CssTemplateInfoGetResponse1,
    CssTemplatePkDeleteResponse,
    CssTemplatePkGetResponse,
    CssTemplatePkGetResponse1,
    CssTemplatePkPutResponse,
    CssTemplatePkPutResponse1,
    CssTemplatePostResponse,
    CssTemplatePostResponse1,
    CssTemplateRelatedColumnNameGetResponse,
    CssTemplateRestApiPost,
    CssTemplateRestApiPut,
    DashboardDeleteResponse,
    DashboardExportGetResponse,
    DashboardFavoriteStatusGetResponse,
    DashboardGetResponse,
    DashboardGetResponse1,
    DashboardIdOrSlugChartsGetResponse,
    DashboardIdOrSlugChartsGetResponse1,
    DashboardIdOrSlugDatasetsGetResponse,
    DashboardIdOrSlugDatasetsGetResponse1,
    DashboardIdOrSlugGetResponse,
    DashboardIdOrSlugGetResponse1,
    DashboardImportPostResponse,
    DashboardInfoGetResponse,
    DashboardInfoGetResponse1,
    DashboardPkDeleteResponse,
    DashboardPkPutResponse,
    DashboardPkPutResponse1,
    DashboardPkThumbnailDigestGetResponse,
    DashboardPostResponse,
    DashboardPostResponse1,
    DashboardRelatedColumnNameGetResponse,
    DashboardRestApiPost,
    DashboardRestApiPut,
    DatabaseAvailableGetResponse,
    DatabaseAvailableGetResponse1,
    DatabaseExportGetResponse,
    DatabaseFunctionNamesResponse,
    DatabaseGetResponse,
    DatabaseGetResponse1,
    DatabaseImportPostResponse,
    DatabaseInfoGetResponse,
    DatabaseInfoGetResponse1,
    DatabasePkDeleteResponse,
    DatabasePkFunctionNamesGetResponse,
    DatabasePkGetResponse,
    DatabasePkGetResponse1,
    DatabasePkPutResponse,
    DatabasePkPutResponse1,
    DatabasePkRelatedObjectsGetResponse,
    DatabasePkSchemasGetResponse,
    DatabasePkSelectStarTableNameGetResponse,
    DatabasePkSelectStarTableNameSchemaNameGetResponse,
    DatabasePkTableTableNameSchemaNameGetResponse,
    DatabasePostResponse,
    DatabasePostResponse1,
    DatabaseRelatedObjectsResponse,
    DatabaseRestApiPost,
    DatabaseRestApiPut,
    DatabaseSchemasQuerySchema,
    DatabaseTestConnectionPostResponse,
    DatabaseTestConnectionSchema,
    DatabaseValidateParametersPostResponse,
    DatabaseValidateParametersSchema,
    DatasetDeleteResponse,
    DatasetDistinctColumnNameGetResponse,
    DatasetExportGetResponse,
    DatasetGetResponse,
    DatasetGetResponse1,
    DatasetImportPostResponse,
    DatasetInfoGetResponse,
    DatasetInfoGetResponse1,
    DatasetPkColumnColumnIdDeleteResponse,
    DatasetPkDeleteResponse,
    DatasetPkGetResponse,
    DatasetPkGetResponse1,
    DatasetPkMetricMetricIdDeleteResponse,
    DatasetPkPutResponse,
    DatasetPkPutResponse1,
    DatasetPkRefreshPutResponse,
    DatasetPkRelatedObjectsGetResponse,
    DatasetPostResponse,
    DatasetPostResponse1,
    DatasetRelatedColumnNameGetResponse,
    DatasetRelatedObjectsResponse,
    DatasetRestApiPost,
    DatasetRestApiPut,
    DistincResponseSchema,
    GetDeleteIdsSchema,
    GetExportIdsSchema,
    GetFavStarIdsSchema,
    GetFavStarIdsSchema1,
    GetInfoSchema,
    GetItemSchema,
    GetListSchema,
    GetRelatedSchema,
    LogGetResponse,
    LogGetResponse1,
    LogPkGetResponse,
    LogPkGetResponse1,
    LogPostResponse,
    LogPostResponse1,
    LogRestApiPost,
    MenuGetResponse,
    MenuGetResponse1,
    OpenapiVersionOpenapiGetResponse,
    OpenapiVersionOpenapiGetResponse1,
    QueryDistinctColumnNameGetResponse,
    QueryGetResponse,
    QueryGetResponse1,
    QueryPkGetResponse,
    QueryPkGetResponse1,
    QueryRelatedColumnNameGetResponse,
    RelatedResponseSchema,
    ReportDeleteResponse,
    ReportGetResponse,
    ReportGetResponse1,
    ReportInfoGetResponse,
    ReportInfoGetResponse1,
    ReportPkDeleteResponse,
    ReportPkGetResponse,
    ReportPkGetResponse1,
    ReportPkLogGetResponse,
    ReportPkLogGetResponse1,
    ReportPkLogLogIdGetResponse,
    ReportPkLogLogIdGetResponse1,
    ReportPkPutResponse,
    ReportPkPutResponse1,
    ReportPostResponse,
    ReportPostResponse1,
    ReportRelatedColumnNameGetResponse,
    ReportScheduleRestApiPost,
    ReportScheduleRestApiPut,
    SavedQueryDeleteResponse,
    SavedQueryDistinctColumnNameGetResponse,
    SavedQueryExportGetResponse,
    SavedQueryGetResponse,
    SavedQueryGetResponse1,
    SavedQueryImportPostResponse,
    SavedQueryInfoGetResponse,
    SavedQueryInfoGetResponse1,
    SavedQueryPkDeleteResponse,
    SavedQueryPkGetResponse,
    SavedQueryPkGetResponse1,
    SavedQueryPkPutResponse,
    SavedQueryPkPutResponse1,
    SavedQueryPostResponse,
    SavedQueryPostResponse1,
    SavedQueryRelatedColumnNameGetResponse,
    SavedQueryRestApiPost,
    SavedQueryRestApiPut,
    SchemasResponseSchema,
    ScreenshotQuerySchema,
    SecurityCsrfTokenGetResponse,
    SecurityCsrfTokenGetResponse1,
    SecurityLoginPostRequest,
    SecurityLoginPostResponse,
    SecurityLoginPostResponse1,
    SecurityRefreshPostResponse,
    SecurityRefreshPostResponse1,
    SelectStarResponseSchema,
    TableMetadataResponseSchema,
    ThumbnailQuerySchema,
)

app = MCPProxy(
    description='Superset',
    title='Superset',
    version='v1',
    servers=[{'url': 'http://superset.apache.local'}, {'url': '/api/v1'}],
)


@app.delete(
    '/annotation_layer/',
    description=""" Deletes multiple annotation layers in a bulk operation. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_annotation_layer_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/',
    description=""" Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'event_handling',
        'cache_invalidation',
        'chart_operations',
        'css_template_management',
        'dashboard_management',
        'database_management',
        'dataset_management',
        'log_management',
        'report_management',
        'saved_query_management',
        'query_operations',
        'security_operations',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/annotation_layer/',
    description=""" Create an Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_annotation_layer_(body: AnnotationLayerRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/_info',
    description=""" Get metadata information about this API resource """,
    tags=['chart_management', 'query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/annotation_layer/{pk}',
    description=""" Delete Annotation layer """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_annotation_layer__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/{pk}',
    description=""" Get an Annotation layer """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/annotation_layer/{pk}',
    description=""" Update an Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_annotation_layer__pk(pk: int, body: AnnotationLayerRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/annotation_layer/{pk}/annotation/',
    description=""" Deletes multiple annotation in a bulk operation. """,
    tags=['database_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_annotation_layer__pk_annotation_(
    pk: int, q: Optional[GetDeleteIdsSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/{pk}/annotation/',
    description=""" Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer__pk_annotation_(pk: int, q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/annotation_layer/{pk}/annotation/',
    description=""" Create an Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_annotation_layer__pk_annotation_(pk: int, body: AnnotationRestApiPost = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/annotation_layer/{pk}/annotation/{annotation_id}',
    description=""" Delete Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_annotation_layer__pk_annotation__annotation_id(
    pk: int, annotation_id: int = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/annotation_layer/{pk}/annotation/{annotation_id}',
    description=""" Get an Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_annotation_layer__pk_annotation__annotation_id(
    pk: int, annotation_id: int = ..., q: Optional[GetItemSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/annotation_layer/{pk}/annotation/{annotation_id}',
    description=""" Update an Annotation layer """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_annotation_layer__pk_annotation__annotation_id(
    pk: int, annotation_id: int = ..., body: AnnotationRestApiPut = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/async_event/',
    description=""" Reads off of the Redis events stream, using the user's JWT token and optional query params for last event received. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_async_event_(last_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cachekey/invalidate',
    description=""" Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records """,
    tags=['cache_invalidation'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_cachekey_invalidate(body: CacheInvalidationRequestSchema):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/chart/',
    description=""" Deletes multiple Charts in a bulk operation. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_chart_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/',
    description=""" Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata. """,
    tags=['chart_data_handling', 'query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chart/',
    description=""" Create a new Chart. """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_chart_(body: ChartRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/_info',
    description=""" Several metadata information about chart API endpoints. """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chart/data',
    description=""" Takes a query context constructed in the client and returns payload data response for the given query. """,
    tags=['chart_management', 'chart_data_handling', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_chart_data(body: ChartDataQueryContextSchema):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/data/{cache_key}',
    description=""" Takes a query context cache key and returns payload data response for the given query. """,
    tags=['cache_invalidation'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart_data__cache_key(cache_key: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/export/',
    description=""" Exports multiple charts and downloads them as YAML files """,
    tags=[
        'chart_management',
        'chart_data_handling',
        'database_management',
        'dataset_management',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart_export_(q: Optional[GetExportIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/favorite_status/',
    description=""" Check favorited dashboards for current user """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart_favorite_status_(q: Optional[GetFavStarIdsSchema1] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chart/import/',
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_chart_import_(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/related/{column_name}',
    description=""" Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/chart/{pk}',
    description=""" Deletes a Chart. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_chart__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/{pk}',
    description=""" Get a chart detail information. """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/chart/{pk}',
    description=""" Changes a Chart. """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_chart__pk(pk: int, body: ChartRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/{pk}/cache_screenshot/',
    description=""" Compute and cache a screenshot. """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__pk_cache_screenshot_(pk: int, q: Optional[ScreenshotQuerySchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/{pk}/data/',
    description=""" Takes a chart ID and uses the query context stored when the chart was saved to return payload data response. """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__pk_data_(
    pk: int, format: Optional[str] = None, type: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/{pk}/screenshot/{digest}/',
    description=""" Get a computed screenshot from cache. """,
    tags=['event_handling', 'cache_invalidation'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__pk_screenshot__digest_(pk: int, digest: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chart/{pk}/thumbnail/{digest}/',
    description=""" Compute or get already computed chart thumbnail from cache. """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_chart__pk_thumbnail__digest_(pk: int, digest: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/css_template/',
    description=""" Deletes multiple css templates in a bulk operation. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_css_template_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/css_template/',
    description=""" Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_css_template_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/css_template/',
    description=""" Create a CSS template """,
    tags=['css_template_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_css_template_(body: CssTemplateRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/css_template/_info',
    description=""" Get metadata information about this API resource """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_css_template__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/css_template/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_css_template_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/css_template/{pk}',
    description=""" Delete CSS template """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_css_template__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/css_template/{pk}',
    description=""" Get a CSS template """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_css_template__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/css_template/{pk}',
    description=""" Update a CSS template """,
    tags=['css_template_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_css_template__pk(pk: int, body: CssTemplateRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dashboard/',
    description=""" Deletes multiple Dashboards in a bulk operation. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dashboard_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/',
    description=""" Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dashboard/',
    description=""" Create a new Dashboard. """,
    tags=['dashboard_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_dashboard_(body: DashboardRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/_info',
    description=""" Several metadata information about dashboard API endpoints. """,
    tags=['annotation_layer_management', 'chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/export/',
    description=""" Exports multiple Dashboards and downloads them as YAML files. """,
    tags=['dashboard_management', 'chart_data_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard_export_(q: Optional[GetExportIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/favorite_status/',
    description=""" Check favorited dashboards for current user """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard_favorite_status_(q: Optional[GetFavStarIdsSchema1] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dashboard/import/',
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_dashboard_import_(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/related/{column_name}',
    description=""" Get a list of all possible owners for a dashboard. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/{id_or_slug}',
    description=""" Get a dashboard detail information. """,
    tags=['event_handling', 'api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard__id_or_slug(id_or_slug: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/{id_or_slug}/charts',
    description=""" Get the chart definitions for a given dashboard """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard__id_or_slug_charts(id_or_slug: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/{id_or_slug}/datasets',
    description=""" Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts. """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard__id_or_slug_datasets(id_or_slug: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dashboard/{pk}',
    description=""" Deletes a Dashboard. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dashboard__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/dashboard/{pk}',
    description=""" Changes a Dashboard. """,
    tags=['dashboard_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_dashboard__pk(pk: int, body: DashboardRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dashboard/{pk}/thumbnail/{digest}/',
    description=""" Compute async or get already computed dashboard thumbnail from cache. """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dashboard__pk_thumbnail__digest_(
    pk: int, digest: str = ..., q: Optional[ThumbnailQuerySchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/',
    description=""" Get a list of models """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/',
    description=""" Create a new Database. """,
    tags=['database_management', 'api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_database_(body: DatabaseRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/_info',
    description=""" Get metadata information about this API resource """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/available/',
    description=""" Get names of databases currently available """,
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'event_handling',
        'cache_invalidation',
        'chart_operations',
        'css_template_management',
        'dashboard_management',
        'database_management',
        'dataset_management',
        'log_management',
        'report_management',
        'saved_query_management',
        'query_operations',
        'security_operations',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database_available_():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/export/',
    description=""" Download database(s) and associated dataset(s) as a zip file """,
    tags=['chart_data_handling', 'dashboard_management', 'dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database_export_(q: Optional[GetExportIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/import/',
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_database_import_(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/test_connection',
    description=""" Tests a database connection """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_database_test_connection(body: DatabaseTestConnectionSchema):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/validate_parameters',
    description=""" Validates parameters used to connect to a database """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_database_validate_parameters(body: DatabaseValidateParametersSchema):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/database/{pk}',
    description=""" Deletes a Database. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_database__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}',
    description=""" Get an item model """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/database/{pk}',
    description=""" Changes a Database. """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_database__pk(pk: int, body: DatabaseRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/function_names/',
    description=""" Get function names supported by a database """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_function_names_(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/related_objects/',
    description=""" Get charts and dashboards count associated to a database """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_related_objects_(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/schemas/',
    description=""" Get all schemas from a database """,
    tags=['database_management', 'query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_schemas_(pk: int, q: Optional[DatabaseSchemasQuerySchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/select_star/{table_name}/',
    description=""" Get database select star for table """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_select_star__table_name_(
    pk: int, table_name: str = ..., schema_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/select_star/{table_name}/{schema_name}/',
    description=""" Get database select star for table """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_select_star__table_name__schema_name_(
    pk: int, table_name: str = ..., schema_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/{pk}/table/{table_name}/{schema_name}/',
    description=""" Get database table metadata """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_database__pk_table__table_name__schema_name_(
    pk: int, table_name: str = ..., schema_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dataset/',
    description=""" Deletes multiple Datasets in a bulk operation. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/',
    description=""" Get a list of models """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dataset/',
    description=""" Create a new Dataset """,
    tags=['dataset_management', 'api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_dataset_(body: DatasetRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/_info',
    description=""" Get metadata information about this API resource """,
    tags=['annotation_layer_management', 'chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/distinct/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset_distinct__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/export/',
    description=""" Exports multiple datasets and downloads them as YAML files """,
    tags=['dashboard_management', 'chart_data_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset_export_(q: Optional[GetExportIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dataset/import/',
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'chart_operations',
        'dashboard_management',
        'database_management',
        'dataset_management',
        'report_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_dataset_import_(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dataset/{pk}',
    description=""" Deletes a Dataset """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/{pk}',
    description=""" Get an item model """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/dataset/{pk}',
    description=""" Changes a Dataset """,
    tags=['dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_dataset__pk(
    pk: int, override_columns: Optional[bool] = None, body: DatasetRestApiPut = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dataset/{pk}/column/{column_id}',
    description=""" Delete a Dataset column """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset__pk_column__column_id(pk: int, column_id: int = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dataset/{pk}/metric/{metric_id}',
    description=""" Delete a Dataset metric """,
    tags=['chart_management', 'chart_operations', 'chart_data_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset__pk_metric__metric_id(pk: int, metric_id: int = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/dataset/{pk}/refresh',
    description=""" Refreshes and updates columns of a dataset """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_dataset__pk_refresh(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dataset/{pk}/related_objects',
    description=""" Get charts and dashboards count associated to a dataset """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset__pk_related_objects(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/log/',
    description=""" Get a list of models """,
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'event_handling',
        'cache_invalidation',
        'chart_operations',
        'css_template_management',
        'dashboard_management',
        'database_management',
        'dataset_management',
        'log_management',
        'report_management',
        'saved_query_management',
        'query_operations',
        'security_operations',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_log_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/log/',
    tags=['log_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_log_(body: LogRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/log/{pk}',
    description=""" Get an item model """,
    tags=['chart_operations', 'database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_log__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/menu/',
    description=""" Get the menu data structure. Returns a forest like structure with the menu the user has access to """,
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'event_handling',
        'cache_invalidation',
        'chart_operations',
        'css_template_management',
        'dashboard_management',
        'database_management',
        'dataset_management',
        'log_management',
        'report_management',
        'saved_query_management',
        'query_operations',
        'security_operations',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_menu_():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/openapi/{version}/_openapi',
    description=""" Get the OpenAPI spec for a specific API version """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_openapi__version__openapi(version: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/query/',
    description=""" Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_query_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/query/distinct/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_query_distinct__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/query/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_query_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/query/{pk}',
    description=""" Get query detail information. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_query__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/report/',
    description=""" Deletes multiple report schedules in a bulk operation. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_report_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/',
    description=""" Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/report/',
    description=""" Create a report schedule """,
    tags=['report_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_report_(body: ReportScheduleRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/_info',
    description=""" Get metadata information about this API resource """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/report/{pk}',
    description=""" Delete a report schedule """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_report__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/{pk}',
    description=""" Get a report schedule """,
    tags=['chart_management', 'chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/report/{pk}',
    description=""" Update a report schedule """,
    tags=['report_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_report__pk(pk: int, body: ReportScheduleRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/{pk}/log/',
    description=""" Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report__pk_log_(pk: int, q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/{pk}/log/{log_id}',
    description=""" Get a report schedule log """,
    tags=['log_management', 'event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_report__pk_log__log_id(
    pk: int, log_id: int = ..., q: Optional[GetItemSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/saved_query/',
    description=""" Deletes multiple saved queries in a bulk operation. """,
    tags=['event_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_saved_query_(q: Optional[GetDeleteIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/',
    description=""" Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata. """,
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query_(q: Optional[GetListSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/saved_query/',
    description=""" Create a saved query """,
    tags=['saved_query_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_saved_query_(body: SavedQueryRestApiPost):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/_info',
    description=""" Get metadata information about this API resource """,
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query__info(q: Optional[GetInfoSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/distinct/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query_distinct__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/export/',
    description=""" Exports multiple saved queries and downloads them as YAML files """,
    tags=['api_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query_export_(q: Optional[GetExportIdsSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/saved_query/import/',
    tags=['annotation_layer_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_saved_query_import_(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/related/{column_name}',
    tags=['query_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query_related__column_name(
    column_name: str, q: Optional[GetRelatedSchema] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/saved_query/{pk}',
    description=""" Delete saved query """,
    tags=['chart_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_saved_query__pk(pk: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saved_query/{pk}',
    description=""" Get a saved query """,
    tags=['database_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_saved_query__pk(pk: int, q: Optional[GetItemSchema] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/saved_query/{pk}',
    description=""" Update a saved query """,
    tags=['saved_query_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put_saved_query__pk(pk: int, body: SavedQueryRestApiPut = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/security/csrf_token/',
    description=""" Fetch the CSRF token """,
    tags=[
        'annotation_layer_management',
        'chart_management',
        'chart_data_handling',
        'database_management',
        'dataset_management',
        'log_management',
        'report_management',
        'saved_query_management',
        'query_operations',
        'security_operations',
        'api_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_security_csrf_token_():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/security/login',
    description=""" Authenticate and get a JWT access and refresh token """,
    tags=['security_operations'],
)
def post_security_login(body: SecurityLoginPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/security/refresh',
    description=""" Use the refresh token to get a new JWT access token """,
    tags=['chart_management', 'chart_operations', 'chart_data_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post_security_refresh():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
